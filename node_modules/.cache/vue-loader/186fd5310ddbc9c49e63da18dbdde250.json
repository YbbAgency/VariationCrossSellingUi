{"remainingRequest":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/src/App.vue?vue&type=template&id=03488a8f&","dependencies":[{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/src/App.vue","mtime":1686129681445},{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}