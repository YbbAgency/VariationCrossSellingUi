{"remainingRequest":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/src/components/Main.vue?vue&type=template&id=3fb87135&","dependencies":[{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/src/components/Main.vue","mtime":1686752434813},{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lennart/VueProjekte/plentyui/VariationCrossSellingUi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}